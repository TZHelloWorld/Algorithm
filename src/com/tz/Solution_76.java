package com.tz;

public class Solution_76 {
    /**
     * 这段代码是一个解决字符串问题的算法，用于求解一个字符串s中包含另一个字符串t的最小子串。具体解释如下：
     * 首先，定义两个数组chars和flag，长度均为128，用于统计t字符串中每个字符出现的次数和记录字符是否在t字符串中出现。
     * 接下来，使用for循环遍历字符串t，将flag数组中对应的字符标记为true，chars数组中对应的字符出现次数加1。
     * 定义变量cnt、l、min_l、min_size，分别表示当前滑动窗口中包含t字符串的字符个数、窗口左端点、最小子串的左端点和长度。
     * 通过for循环遍历字符串s，对于每个字符，判断其是否在t字符串中出现。如果出现，则将其在chars数组中对应的值减1，并判断是否减至0以下。如果减至0以下，则表示当前滑动窗口中已经包含t字符串中该字符的所有出现次数。
     * 如果当前滑动窗口中已经包含t字符串中的全部字符，则进入while循环，尝试将窗口左端点l右移，以缩小窗口大小。在不影响结果的情况下，更新最小子串的左端点和长度。
     * 在while循环中，如果l对应的字符在t字符串中出现，并且其在chars数组中对应的值加1后大于0，则表示当前窗口中已经不包含该字符的所有出现次数，cnt减1。
     * 最后，返回最小子串，如果不存在，则返回空字符串。
     * 该算法的时间复杂度为O(n)，其中n为字符串s的长度。
     **/
    public String minWindow(String s, String t) {
        // 定义一个长度为128的int数组，用于记录每个字符出现的次数
        //每个数组的下标代表着该字符的ASCII数值
        int[] chars = new int[128];

        // 定义一个长度为128的boolean数组，用于标记每个字符是否在t字符串中出现
        boolean[] flag = new boolean[128];

        // 统计字符t中的字符情况
        for (int i = 0; i < t.length(); i++) {
            // 标记t字符串中出现的字符
            flag[t.charAt(i)] = true;
            // 统计t字符串中每个字符出现的次数
            ++chars[t.charAt(i)];
        }
        // 定义变量cnt、l、min_l、min_size，分别表示当前滑动窗口中包含t字符串的字符个数、窗口左端点、最小子串的左端点和长度。
        int cnt = 0, l = 0, min_l = 0, min_size = s.length() + 1;

        // 滑动窗口
        for (int r = 0; r < s.length(); ++r) {
            // 如果当前字符在t字符串中出现
            if (flag[s.charAt(r)]) {

                if (--chars[s.charAt(r)] >= 0) {
                    ++cnt;
                }
                // 若目前滑动窗口已包含T中全部字符，
                // 则尝试将l右移， 在不影响结果的情况下获得最短子字符串
                while (cnt == t.length()) { // 如果当前滑动窗口已经包含t字符串中的所有字符
                    if (r - l + 1 < min_size) { // 判断当前子串的长度是否小于之前求得的最小子串长度
                        min_l = l; // 更新最小子串的左端点
                        min_size = r - l + 1; // 更新最小子串的长度
                    }
                    if (flag[s.charAt(l)] && ++chars[s.charAt(l)] > 0) { // 将窗口左端点l右移，缩小窗口大小
                        --cnt; // 如果l对应的字符在t字符串中出现，并且其在chars数组中对应的值加1后大于0，则表示当前窗口中已经不包含该字符的所有出现次数
                    }
                    ++l; // 将窗口左端点l右移
                }
            }
        }

        // 返回最小子串，如果不存在，则返回空字符串。
        return min_size > s.length() ? "" : s.substring(min_l, min_l + min_size);
    }
}


